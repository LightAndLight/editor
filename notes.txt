there is a graph

  type ID = Int

  type Graph = Map ID (Dynamic Node)

  graph : Graph

the graph has a root

  root : ID

each node in the graph is something that needs to be rendered

  renderNode : MonadWidget m => Node -> m ()

  (dyn_ . fmap renderNode <$> graph) : MonadWidget m => Map ID (m ())

each widget can generate changes that apply to other widgets

  renderNode : MonadWidget m => Node -> m (Event (Map ID Change))

  (dyn . fmap renderNode <$> graph) : MonadWidget m => Map Int (m (Event (Event (Map ID Change)))

when the root node is 

each widget needs to change based on these events

  renderNode : MonadWidget m => Event (Map ID Change) -> Dynamic Node -> m (Event (Map ID Change))

  eChanges : Event (Map ID Change) 

  (renderNode eChanges <$> graph) : MonadWidget m => Map Int (m (Event (Map ID Change))



there is a graph

  type ID = Int

  type Graph = Map ID Node

  graph : Graph

the graph has a root

  root : ID

we can render Nodes

  render : MonadWidget m => Node -> m ()

nodes can cause changes to other nodes

  render : MonadWidget m => Node -> m (Event (Map ID Change))

We want to make each static node into a dynamic widgets.
There are events that causes this node to be modified, and this is why the
widgets are dynamic

  nodeWidget :
    MonadWidget m =>
    Node ->
    Event (Node -> Node) ->
    Dynamic (m (Event (Map ID Change)))
  nodeWidget node eUpdate = render <$> foldDyn ($) node eUpdate
